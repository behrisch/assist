/*
* generated by Xtext
*/
grammar InternalMappingDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package ch.hilbri.assist.mappingdsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ch.hilbri.assist.mappingdsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import ch.hilbri.assist.mappingdsl.services.MappingDSLGrammarAccess;

}

@parser::members {
 
 	private MappingDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MappingDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleAssistModel
entryRuleAssistModel 
:
{ before(grammarAccess.getAssistModelRule()); }
	 ruleAssistModel
{ after(grammarAccess.getAssistModelRule()); } 
	 EOF 
;

// Rule AssistModel
ruleAssistModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssistModelAccess().getSystemNameAssignment()); }
(rule__AssistModel__SystemNameAssignment)
{ after(grammarAccess.getAssistModelAccess().getSystemNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__AssistModel__SystemNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssistModelAccess().getSystemNameSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getAssistModelAccess().getSystemNameSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


