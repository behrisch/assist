@GenModel(copyrightText="Copyright 2014 - Robert Hilbrich")

package ch.hilbri.assist.result

import ch.hilbri.assist.model.AssistModel
import ch.hilbri.assist.model.DesignAssuranceLevelType
import ch.hilbri.assist.model.HardwareArchitectureLevelType
import ch.hilbri.assist.model.IOAdapterProtectionLevelType
import ch.hilbri.assist.model.IOAdapterType

interface Comparable wraps Comparable<Result>{}

class Result extends Comparable {
	
	@GenModel(documentation="Name of this result") 
	String							name
	
	@GenModel(documentation="Name of the system")
	String							systemName
	
	@GenModel(documentation="List of all hardware elements in the top hierarchy level")
	contains HardwareElement[0..*]	rootHardwareElements
	
	@GenModel(documentation="Returns the top hardware level for this result")
	derived HardwareArchitectureLevelType topHardwareLevel get {
		if (!rootHardwareElements.empty) {
			switch rootHardwareElements.get(0)  {
				Compartment : 	HardwareArchitectureLevelType.COMPARTMENT
				Box: 			HardwareArchitectureLevelType.BOX
				Board: 			HardwareArchitectureLevelType.BOARD
				Processor: 		HardwareArchitectureLevelType.PROCESSOR
				Core: 			HardwareArchitectureLevelType.CORE
			}
		}
	}
	
	@GenModel(documentation="Returns the bottom hardware level for this result")
	derived HardwareArchitectureLevelType bottomHardwareLevel get {
		HardwareArchitectureLevelType.CORE
	}
	
	@GenModel(documentation="Contains a list of all io adapters")
	contains IOAdapter[0..*]				ioAdapters
	
	@GenModel(documentation="Contains a list of all application groups")
	contains ApplicationGroup[0..*]			applicationGroups
	
	@GenModel(documentation="Contains a list of all applications")
	contains Application[0..*]				applications
	
	@GenModel(documentation="Contains a list of all threads")
	contains Thread[0..*]					threads
	
	@GenModel(documentation="Contains a list of all networks")
	contains Network[0..*] 					networks

	@GenModel(documentation="Contains a list of all communication relations between applications")
	contains CommunicationRelation[0..*]	communications
	
	@GenModel(documentation="Contains the results of the evaluation for this result")
	contains Evaluation[0..1] 				evaluation
	
	@GenModel(documentation="Refers to the original input specification")
	refers AssistModel[0..1]				assistModel
	
	@GenModel(documentation="Refers to the original input specification")
	op int compareTo(Result o) {
		val double diff = this ?. evaluation.totalScore - o ?. evaluation.totalScore;
		if (diff < 0.0)	return 1;
		if (diff > 0.0)	return -1;
		return 0;
	}
}


class HardwareElement {
	String name
}

class Compartment extends HardwareElement {
	String manufacturer
	String powerSupply
	String side
	String zone
	contains Box[1..*] boxes opposite compartment
}

class Box extends HardwareElement {
	String manufacturer
	container Compartment compartment opposite boxes
	contains Board[1..*] boards opposite box
}

class Board extends HardwareElement {
	String 						manufacturer
	String 						boardType
	String 						powerSupply
	DesignAssuranceLevelType 	assuranceLevel = "None"
	int 						ramCapacity
	double						ramUtilization
	int 						romCapacity
	double						romUtilization
	container Box 				box opposite boards
	contains Processor[1..*] 	processors opposite board
	contains IOAdapter[0..*] 	ioAdapters
	refers Network[0..*] 		networks opposite boards
}

class Processor extends HardwareElement {
	String manufacturer
	String processorType
	container Board board opposite processors
	contains Core[1..*] cores opposite processor 
}

class Core extends HardwareElement {
	String 						architecture
	int 						capacity
	double						utilization
	container Processor 		processor opposite cores
	refers Thread[0..*] 		threads
}

class IOAdapter {
	String name
	int totalUnitCount
	IOAdapterType adapterType
	IOAdapterProtectionLevelType protectionLevel = "None"
}

class Network {
	String name
	int bandwidthCapacity
	derived boolean isBoardLocalNetwork get { boards.size <= 1 }
	refers Board[2..*] boards opposite networks
}

class ApplicationGroup {
	String name
	refers Application[1..*] applications
}

class Application {
	String 									name
	int 									coreUtilization
	int 									ramUtilization
	int 									romUtilization
	DesignAssuranceLevelType 				criticalityLevel 					= "None"
	IOAdapterProtectionLevelType 			ioAdapterProtectionLevel 			= "None"
	int 									parallelThreads 					= "1"
	String 									developedBy
	contains IOAdapterRequirement[0..*] 	ioAdapterRequirements
	refers HardwareElement[0..*] 			restrictMappingToHardwareElements
	contains Thread[0..*] 					threads opposite application
}

class Thread {
	container Application 	application opposite threads
	derived String			name get { application.name + '_' + application.threads.indexOf(this) }
}

class IOAdapterRequirement {	
	IOAdapterType 	adapterType
	int 			requiredUnits 		= "0"
	boolean 		isSharedAllowed 	= "false"
	boolean 		isExclusiveOnly 	= "false"
}

class CommunicationRelation{
	refers Application[1..*] applicationsOrGroups
	int bandwidthUtilization
}

abstract class AbstractMetric  {
	String 			name
	int				weight
	boolean 		higherScoreIsBetter
	boolean 		builtIn = "true"
	op double 		computeScore(Result result)
}

class Evaluation {
	double 							totalScore
	double[0..*]					individualScores
	contains AbstractMetric[0..*] 	metricsUsed
	
	
}
