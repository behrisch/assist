grammar ch.hilbri.assist.mappingdsl.MappingDSL with org.eclipse.xtext.common.Terminals

import "ch.hilbri.assist"

AssistModel: 
	'Global' 	'{' 
					'System name' '=' systemName=STRING ';' 
	'}'
	'Hardware' 	'{'	
					(hardwareContainer+=HardwareElementContainer)+
					(networks+=Network)* 
	'}'

	'Software' '{'
					(applications+=Application)+ 
					(applicationGroups+=ApplicationGroup)*
	'}'

	(
	'Relations' '{'
					(dissimilarityRelations+=DissimilarityRelation)*
					(dislocalityRelations+=DislocalityRelation)*
					(proximityRelations+=ProximityRelation)*
	'}'
	)?
	
	(
	'Communication' '{'
					(communicationRelations+=CommunicationRelation)*
	'}'
	)?
;

HardwareElementContainer: 
	Compartment | Box | Board
;

Compartment: 
	'Compartment' name=ID '{'
		('Manufacturer' 			'=' manufacturer=STRING ';')?
		('Power supply' 			'=' powerSupply=STRING ';')?
		('Side' 					'=' side=STRING ';')?
		('Zone' 					'=' zone=STRING ';')?
		(boxes+=Box)+
		('Generic properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}'
;


Box:
	'Box' name=ID '{'
		('Manufacturer' 			'=' manufacturer=STRING ';')?
		(boards+=Board)+
		('Generic properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}'
;
	
Board:
	'Board' name=ID '{'
		('Manufacturer' 			'=' manufacturer=STRING ';')?
		('Type' 					'=' boardType=STRING ';')?
		('Power supply' 			'=' powerSupply=STRING ';')?
	    ('Design assurance level' 	'=' assuranceLevel=DesignAssuranceLevelType';')?
		(processors+=Processor)+
		('RAM capacity'  			'=' ramCapacity=INT ';')?
		('ROM capacity'  			'=' romCapacity=INT ';')?
		(ioAdapters+=IOAdapter)*
		('Generic properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}'
;

Processor:
	'Processor' name=ID '{'
	    ('Manufacturer' 			'=' manufacturer=STRING ';')?
	    ('Type'         			'=' processorType=STRING ';')?
		(cores+=Core)+
		('Generic properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}';

Core:
	'Core' name=ID '{' 
		'Capacity' 					'=' capacity=INT ';'
		('Architecture' 			'=' architecture=STRING ';')?
		('Generic properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}';

IOAdapter:
	'I/O Adapter' name=ID '{'
		'Type' 						'=' adapterType=IOAdapterType ';'
		('IO Protection' 			'=' protectionLevel=IOAdapterProtectionLevelType ';')?
		'Total units' 				'=' totalUnitCount=INT ';'
	'}'
;

Network:
	'Network' name=ID '{'
		'Bandwidth' 				'=' bandwidthCapacity=INT ';'
		'Connects' boards+=[Board|QualifiedName] ',' boards+=[Board|QualifiedName] (',' boards+=[Board|QualifiedName])* ';'
		('Generic properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}';

/* SOFTWARE */

ApplicationGroup: 
	'Group' name=ID '{' applications+=[Application] ',' applications+=[Application] (',' applications+=[Application])* '}'
;

Application:
	'Application' name=ID '{'
		'Core-utilization' 				'=' coreUtilization=INT ';' 
 		('Required RAM capacity' 		'=' ramUtilization=INT ';')? 
		('Required ROM capacity' 		'=' romUtilization=INT ';')? 
	    ('Criticality level' 			'=' criticalityLevel=DesignAssuranceLevelType ';')?
	    ('Required IO protection' 		'=' ioAdapterProtectionLevel=IOAdapterProtectionLevelType ';')?
		('Identical parallel threads' 	'=' parallelThreads=INT ';')?
		('Developed by' 				'=' developedBy=STRING ';')?
		(ioAdapterRequirements+=IOAdapterRequirement)*
		('Restrict deployment to' 		'{' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName] (',' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName])* '}' ';')? 
		('Generic properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}';

IOAdapterRequirement: 
	'Requires' requiredUnits=INT adapterType=IOAdapterType 'adapter' '(' (isExclusiveOnly?='exclusive' | isSharedAllowed?='shared') 'access)' ';' 
;

/* RELATIONEN */

DislocalityRelation:
	applicationsOrGroups+=[ApplicationOrApplicationGroup] (',' applicationsOrGroups+=[ApplicationOrApplicationGroup])* 'dislocal up to' hardwareLevel=HardwareArchitectureLevelType ';';
	
ProximityRelation:
	applicationsOrGroups+=[ApplicationOrApplicationGroup] (',' applicationsOrGroups+=[ApplicationOrApplicationGroup])* 'on same' hardwareLevel=HardwareArchitectureLevelType ';'; 

CommunicationRelation: 
	applicationsOrGroups+=[ApplicationOrApplicationGroup] (',' applicationsOrGroups+=[ApplicationOrApplicationGroup])* 'require' bandwidthUtilization=INT 'bandwidth' ';';
	
DissimilarityRelation: 
	applicationsOrGroups+=[ApplicationOrApplicationGroup] (',' applicationsOrGroups+=[ApplicationOrApplicationGroup])+
	'dissimilar based on'
	dissimilarityClause=DissimilarityClause ';'
;

DissimilarityClause:  
	DissimilarityEntry | ( '(' (=>DissimilarityDisjunction | DissimilarityConjunction) ')' ) // Der Pfeil ist wichtig!
;

DissimilarityDisjunction: 
	dissimilarityClauses+=DissimilarityClause ( 'OR' dissimilarityClauses+=DissimilarityClause)+ ;

DissimilarityConjunction: 
	dissimilarityClauses+=DissimilarityClause ( 'AND' dissimilarityClauses+=DissimilarityClause)+ ;

DissimilarityEntry: 
	( 'Compartment.' compartmentAttribute= CompartmentAttributes ) 	|
	( 'Box.' boxAttribute = BoxAttributes) 							|
	( 'Board.' boardAttribute = BoardAttributes)					|
	( 'Processor.' processorAttribute = ProcessorAttributes)
;

enum CompartmentAttributes :
	MANUFACTURER 	= 'Manufacturer' 	| 
	POWERSUPPLY	 	= 'Power supply' 	| 
	SIDE 		 	= 'Side' 			| 
	ZONE		 	= 'Zone';
	
enum BoxAttributes :
	MANUFACTURER 	= 'Manufacturer';
	
enum BoardAttributes:
	MANUFACTURER 	= 'Manufacturer' 	|
	POWERSUPPLY 	= 'PowerSupply'		|
	ASSURANCELEVEL 	= 'AssuranceLevel' 	|
	BOARDTYPE 		= 'BoardType'; 		

enum ProcessorAttributes:
	MANUFACTURER 	= 'Manufacturer' 	| 
	PROCESSORTYPE	= 'ProcessorType' 
;


MetricParameter:  
	name=STRING '=' value=INT ';'
;

QualifiedName:
	ID ('.' ID)*
;

/* ENUMS */
enum HardwareArchitectureLevelType:
	CORE 		= 'Core'		|
	PROCESSOR 	= 'Processor'	|
	BOARD		= 'Board'		|
	BOX			= 'Box'			|
	COMPARTMENT	= 'Compartment'
;

enum DesignAssuranceLevelType: 
	NONE= 'None' 	|
	QS	= 'QS'	 	|
	D	= 'D'		|
	C	= 'C'		|
	B	= 'B'		|
	A 	= 'A'  
;

enum IOAdapterProtectionLevelType:
	NONE 		= 'None' 		|
	LEVEL_1 	= 'L1'		|
	LEVEL_2 	= 'L2'		|
	LEVEL_3 	= 'L3'		|
	LEVEL_4 	= 'L4'		|
	LEVEL_5 	= 'L5'		|
	LEVEL_6 	= 'L6'		|
	LEVEL_7 	= 'L7'		|
	LEVEL_8 	= 'L8'		
;

enum IOAdapterType:
	CAN 		= 'Can'					|
	ELB			= 'Enhanced Local Bus'	|
	ETH			= 'Ethernet'			|
	ANALOG 		= 'Analog'				|
	DIGITAL		= 'Digital'				|
	SERIAL		= 'Serial'				|
	CUSTOM0		= 'Custom Type 0'		|
	CUSTOM1		= 'Custom Type 1'		|
	CUSTOM2		= 'Custom Type 2'		|
	CUSTOM3		= 'Custom Type 3'		|
	CUSTOM4		= 'Custom Type 4'		|
	CUSTOM5		= 'Custom Type 5'		|
	CUSTOM6		= 'Custom Type 6'		|		
	CUSTOM7		= 'Custom Type 7'		|
	CUSTOM8		= 'Custom Type 8'		|
	CUSTOM9		= 'Custom Type 9'		|
	CUSTOM10	= 'Custom Type 10'		|
	CUSTOM11	= 'Custom Type 11'		|
	CUSTOM12	= 'Custom Type 12'		|
	CUSTOM13	= 'Custom Type 13'		|
	CUSTOM14	= 'Custom Type 14'		|
	CUSTOM15	= 'Custom Type 15'		|
	CUSTOM16	= 'Custom Type 16'		|
	CUSTOM17	= 'Custom Type 17'		|
	CUSTOM18	= 'Custom Type 18'		|
	CUSTOM19	= 'Custom Type 19'		|
	CUSTOM20	= 'Custom Type 20'		|
	CUSTOM21	= 'Custom Type 21'		|
	CUSTOM22	= 'Custom Type 22'		|
	CUSTOM23	= 'Custom Type 23'		|
	CUSTOM24	= 'Custom Type 24'		|
	CUSTOM25	= 'Custom Type 25'		|
	CUSTOM26	= 'Custom Type 26'		|
	CUSTOM27	= 'Custom Type 27'		|
	CUSTOM28	= 'Custom Type 28'		|
	CUSTOM29	= 'Custom Type 29'		|
	CUSTOM30	= 'Custom Type 30'		|
	CUSTOM31	= 'Custom Type 31'		|
	CUSTOM32	= 'Custom Type 32'		|
	CUSTOM33	= 'Custom Type 33'		|
	CUSTOM34	= 'Custom Type 34'		|
	CUSTOM35	= 'Custom Type 35'		|
	CUSTOM36	= 'Custom Type 36'		|
	CUSTOM37	= 'Custom Type 37'		|
	CUSTOM38	= 'Custom Type 38'		|
	CUSTOM39	= 'Custom Type 39'
;

