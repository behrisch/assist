// automatically generated by Xtext
grammar ch.hilbri.assist.mappingdsl.MappingDSL with org.eclipse.xtext.common.Terminals

import "ch.hilbri.assist" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Application returns Application:
	{Application}
	'Application'
	name=EString
	'{'
		('coreUtilization' coreUtilization=EInt)?
		('ramUtilization' ramUtilization=EInt)?
		('romUtilization' romUtilization=EInt)?
		('criticalityLevel' criticalityLevel=DesignAssuranceLevelType)?
		('ioAdapterProtectionLevel' ioAdapterProtectionLevel=IOAdapterProtectionLevelType)?
		('parallelThreads' parallelThreads=EInt)?
		('developedBy' developedBy=EString)?
		('restrictMappingToHardwareElements' '(' restrictMappingToHardwareElements+=[HardwareElement|EString] ( "," restrictMappingToHardwareElements+=[HardwareElement|EString])* ')' )?
		('ioAdapterRequirements' '{' ioAdapterRequirements+=IOAdapterRequirement ( "," ioAdapterRequirements+=IOAdapterRequirement)* '}' )?
		('metricParameters' '{' metricParameters+=MetricParameters ( "," metricParameters+=MetricParameters)* '}' )?
	'}';


HardwareElement returns HardwareElement:
	HardwareElement_Impl | HardwareElementContainer_Impl | Compartment | Box | Board | Processor | Core;







EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

enum DesignAssuranceLevelType returns DesignAssuranceLevelType:
				NONE = 'NONE' | QS = 'QS' | D = 'D' | C = 'C' | B = 'B' | A = 'A';

enum IOAdapterProtectionLevelType returns IOAdapterProtectionLevelType:
				NONE = 'NONE' | LEVEL_1 = 'LEVEL_1' | LEVEL_2 = 'LEVEL_2' | LEVEL_3 = 'LEVEL_3' | LEVEL_4 = 'LEVEL_4' | LEVEL_5 = 'LEVEL_5' | LEVEL_6 = 'LEVEL_6' | LEVEL_7 = 'LEVEL_7' | LEVEL_8 = 'LEVEL_8';

IOAdapterRequirement returns IOAdapterRequirement:
	{IOAdapterRequirement}
	(isSharedAllowed?='isSharedAllowed')?
	(isExclusiveOnly?='isExclusiveOnly')?
	'IOAdapterRequirement'
	'{'
		('adapterType' adapterType=IOAdapterType)?
		('requiredUnits' requiredUnits=EInt)?
	'}';

HardwareElement_Impl returns HardwareElement:
	{HardwareElement}
	'HardwareElement'
	name=EString
	'{'
		('level' level=HardwareArchitectureLevelType)?
	'}';

MetricParameters returns MetricParameters:
	{MetricParameters}
	'MetricParameters'
	name=EString
	'{'
		('value' value=EString)?
	'}';

enum IOAdapterType returns IOAdapterType:
				CAN = 'CAN' | ELB = 'ELB' | ETH = 'ETH' | ANALOG = 'ANALOG' | DIGITAL = 'DIGITAL' | SERIAL = 'SERIAL' | CUSTOM0 = 'CUSTOM0' | CUSTOM1 = 'CUSTOM1' | CUSTOM2 = 'CUSTOM2' | CUSTOM3 = 'CUSTOM3' | CUSTOM4 = 'CUSTOM4' | CUSTOM5 = 'CUSTOM5' | CUSTOM6 = 'CUSTOM6' | CUSTOM7 = 'CUSTOM7' | CUSTOM8 = 'CUSTOM8' | CUSTOM9 = 'CUSTOM9' | CUSTOM10 = 'CUSTOM10' | CUSTOM11 = 'CUSTOM11' | CUSTOM12 = 'CUSTOM12' | CUSTOM13 = 'CUSTOM13' | CUSTOM14 = 'CUSTOM14' | CUSTOM15 = 'CUSTOM15' | CUSTOM16 = 'CUSTOM16' | CUSTOM17 = 'CUSTOM17' | CUSTOM18 = 'CUSTOM18' | CUSTOM19 = 'CUSTOM19' | CUSTOM20 = 'CUSTOM20' | CUSTOM21 = 'CUSTOM21' | CUSTOM22 = 'CUSTOM22' | CUSTOM23 = 'CUSTOM23' | CUSTOM24 = 'CUSTOM24' | CUSTOM25 = 'CUSTOM25' | CUSTOM26 = 'CUSTOM26' | CUSTOM27 = 'CUSTOM27' | CUSTOM28 = 'CUSTOM28' | CUSTOM29 = 'CUSTOM29' | CUSTOM30 = 'CUSTOM30' | CUSTOM31 = 'CUSTOM31' | CUSTOM32 = 'CUSTOM32' | CUSTOM33 = 'CUSTOM33' | CUSTOM34 = 'CUSTOM34' | CUSTOM35 = 'CUSTOM35' | CUSTOM36 = 'CUSTOM36' | CUSTOM37 = 'CUSTOM37' | CUSTOM38 = 'CUSTOM38' | CUSTOM39 = 'CUSTOM39';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum HardwareArchitectureLevelType returns HardwareArchitectureLevelType:
				CORE = 'CORE' | PROCESSOR = 'PROCESSOR' | BOARD = 'BOARD' | BOX = 'BOX' | COMPARTMENT = 'COMPARTMENT';

HardwareElementContainer_Impl returns HardwareElementContainer:
	{HardwareElementContainer}
	'HardwareElementContainer'
	name=EString
	'{'
		('level' level=HardwareArchitectureLevelType)?
	'}';

Compartment returns Compartment:
	'Compartment'
	name=EString
	'{'
		('level' level=HardwareArchitectureLevelType)?
		('manufacturer' manufacturer=EString)?
		('powerSupply' powerSupply=EString)?
		('side' side=EString)?
		('zone' zone=EString)?
		'boxes' '{' boxes+=Box ( "," boxes+=Box)* '}' 
		('metricParameters' '{' metricParameters+=MetricParameters ( "," metricParameters+=MetricParameters)* '}' )?
	'}';

Box returns Box:
	'Box'
	name=EString
	'{'
		('level' level=HardwareArchitectureLevelType)?
		('manufacturer' manufacturer=EString)?
		'boards' '{' boards+=Board ( "," boards+=Board)* '}' 
		('metricParameters' '{' metricParameters+=MetricParameters ( "," metricParameters+=MetricParameters)* '}' )?
	'}';

Board returns Board:
	'Board'
	name=EString
	'{'
		('level' level=HardwareArchitectureLevelType)?
		('manufacturer' manufacturer=EString)?
		('boardType' boardType=EString)?
		('powerSupply' powerSupply=EString)?
		('assuranceLevel' assuranceLevel=DesignAssuranceLevelType)?
		('ramCapacity' ramCapacity=EInt)?
		('romCapacity' romCapacity=EInt)?
		'processors' '{' processors+=Processor ( "," processors+=Processor)* '}' 
		('ioAdapters' '{' ioAdapters+=IOAdapter ( "," ioAdapters+=IOAdapter)* '}' )?
		('metricParameters' '{' metricParameters+=MetricParameters ( "," metricParameters+=MetricParameters)* '}' )?
	'}';

Processor returns Processor:
	'Processor'
	name=EString
	'{'
		('level' level=HardwareArchitectureLevelType)?
		('manufacturer' manufacturer=EString)?
		('processorType' processorType=EString)?
		'cores' '{' cores+=Core ( "," cores+=Core)* '}' 
		('metricParameters' '{' metricParameters+=MetricParameters ( "," metricParameters+=MetricParameters)* '}' )?
	'}';

Core returns Core:
	{Core}
	'Core'
	name=EString
	'{'
		('level' level=HardwareArchitectureLevelType)?
		('architecture' architecture=EString)?
		('capacity' capacity=EInt)?
		('metricParameters' '{' metricParameters+=MetricParameters ( "," metricParameters+=MetricParameters)* '}' )?
	'}';

IOAdapter returns IOAdapter:
	{IOAdapter}
	'IOAdapter'
	name=EString
	'{'
		('totalUnitCount' totalUnitCount=EInt)?
		('adapterType' adapterType=IOAdapterType)?
		('protectionLevel' protectionLevel=IOAdapterProtectionLevelType)?
	'}';
